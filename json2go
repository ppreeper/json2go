#!/usr/bin/env python3
import argparse
import json
import sys
import time


def gettype(value: any, buf: str, omit: bool, level: int) -> str:
    typevalue = type(value)
    if typevalue == str:
        try:
            time.strptime(value, "%Y-%m-%dT%H:%M:%SZ")
            return "time.Time"
        except ValueError:
            return "string"
    elif typevalue == int:
        return "int"
    elif typevalue == float:
        return "float64"
    elif typevalue == bool:
        return "bool"
    elif typevalue == list:
        list_type = ""
        if value:
            list_type = gettype(value[0], buf, omit, level)
        return "[]" + list_type
    elif typevalue == dict:
        struct_text = itermap(value, buf, omit, level=level + 1) + level * buf + "}"
        level = level - 1
        return struct_text
    elif value is None:
        return "any"
    else:
        return ""


def getdef(key: str, value: any, buf: str, omit: bool, level: int) -> str:
    name = key.title().replace("_", "")
    name = (
        name.replace("Url", "URL")
        .replace("Id", "ID")
        .replace("Api", "API")
        .replace("Html", "HTML")
        .replace("Ssh", "SSH")
    )
    return " ".join(
        [
            name,
            gettype(value, buf, omit, level),
            f'`json:"{key},omitempty"`' if omit else f'`json:"{key}"`',
        ]
    )


def itermap(data: any, buf: str, omit: bool, level: int) -> str:
    struct_text = ""
    if type(data) == list and data:
        struct_text += " []struct {\n"
        for key, value in data[0].items():
            struct_text += buf * level + getdef(key, value, buf, omit, level) + "\n"
    elif type(data) == dict:

        struct_text += " struct {\n"
        for key, value in data.items():
            struct_text += buf * level + getdef(key, value, buf, omit, level) + "\n"
    return struct_text


class ArgParser(argparse.ArgumentParser):
    """ArgParser modified to output help on error"""

    def error(self, message):
        sys.stderr.write(f"error: {message}\n")
        self.print_help()
        sys.exit(2)


def main():
    parser = ArgParser(
        prog="json2go",
        description="convert json to go structs",
        epilog="thanks for using %(prog)s!",
    )
    parser.add_argument(
        "-i",
        "--input",
        help="file: <file.json> or stdin: -",
        type=argparse.FileType("r"),
        default="-",
    )
    parser.add_argument(
        "-b", "--buffer", help="indent text", action="store", default="    "
    )
    parser.add_argument(
        "-n", "--name", help="struct name", action="store", default="AutoGenerated"
    )
    parser.add_argument(
        "-o", "--omit", help="add omitempty", action="store_true", default=False
    )
    args = parser.parse_args(args=None if sys.argv[1:] else ["-h"])

    if args.input.name == "-":
        # Read from stdin
        json_data = json.load(sys.stdin.read())
    else:
        # Read from a file
        with args.input as f:
            json_data = json.load(f)

    level = 0
    buf = args.buffer

    print(
        "type "
        + args.name
        + itermap(json_data, buf, args.omit, level=level + 1)
        + "}\n"
    )


if __name__ == "__main__":
    main()
